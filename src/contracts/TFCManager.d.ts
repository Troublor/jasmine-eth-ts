/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ClaimTFC = ContractEventLog<{
  recipient: string;
  amount: string;
  nonce: string;
  sig: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface TfcManager extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): TfcManager;
  clone(): TfcManager;
  methods: {
    claimTFC(
      amount: number | string,
      nonce: number | string,
      sig: string | number[]
    ): NonPayableTransactionObject<void>;

    signer(): NonPayableTransactionObject<string>;

    tfcToken(): NonPayableTransactionObject<string>;

    usedNonces(arg0: number | string): NonPayableTransactionObject<boolean>;
  };
  events: {
    ClaimTFC(cb?: Callback<ClaimTFC>): EventEmitter;
    ClaimTFC(options?: EventOptions, cb?: Callback<ClaimTFC>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ClaimTFC", cb: Callback<ClaimTFC>): void;
  once(event: "ClaimTFC", options: EventOptions, cb: Callback<ClaimTFC>): void;
}
